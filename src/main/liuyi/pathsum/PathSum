package liuyi.pathsum
class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
     TreeNode(int x) { val = x; }
  }
/**
 * https://leetcode-cn.com/problems/path-sum/description/
 * @author liuyi
 *
 */
public class PathSum {
	public static void main(String[] args) {
		TreeNode node1=new TreeNode(5);
		TreeNode node2=new TreeNode(4);
		TreeNode node3=new TreeNode(11);
		TreeNode node4=new TreeNode(7);
		TreeNode node5=new TreeNode(2);
		TreeNode node6=new TreeNode(8);
		TreeNode node7=new TreeNode(13);
		TreeNode node8=new TreeNode(4);
		TreeNode node9=new TreeNode(1);
		node1.left=node2;
		node2.left=node3;
		node3.left=node4;
		node3.right=node5;
		node1.right=node6;
		node6.left=node7;
		node6.right=node8;
		node8.right=node9;
		System.out.println(new PathSum().hasPathSum(node1, 22));
				
	}
	public boolean hasPathSum(TreeNode root, int sum) {
		if(root==null){
			return false;
		}
		return hander(root, 0, sum);
	}
	
	public boolean hander(TreeNode root ,int remain,int sum){
		if(root==null){
			return false;
		}
		remain+=root.val;
		if(root.left!=null){
			boolean result=hander(root.left, remain, sum);
			if(result) return true;
		}
		if(root.right!=null){
			boolean result=hander(root.right, remain, sum);
			if(result) return true;
		}
		if(root.left==null&&root.right==null){
			if(remain==sum){
				return true;
			} 
		}
		return false;
	}
}
